package com.evan.chat.data.source.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.evan.chat.data.source.model.Chat;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CHAT".
*/
public class ChatDao extends AbstractDao<Chat, Long> {

    public static final String TABLENAME = "CHAT";

    /**
     * Properties of entity Chat.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Chat_id = new Property(0, Long.class, "chat_id", true, "_id");
        public final static Property Send_time = new Property(1, long.class, "send_time", false, "SEND_TIME");
        public final static Property From_user_id = new Property(2, long.class, "from_user_id", false, "FROM_USER_ID");
        public final static Property To_user_id = new Property(3, long.class, "to_user_id", false, "TO_USER_ID");
        public final static Property Sender = new Property(4, int.class, "sender", false, "SENDER");
        public final static Property Content = new Property(5, String.class, "content", false, "CONTENT");
    }


    public ChatDao(DaoConfig config) {
        super(config);
    }
    
    public ChatDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CHAT\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: chat_id
                "\"SEND_TIME\" INTEGER NOT NULL ," + // 1: send_time
                "\"FROM_USER_ID\" INTEGER NOT NULL ," + // 2: from_user_id
                "\"TO_USER_ID\" INTEGER NOT NULL ," + // 3: to_user_id
                "\"SENDER\" INTEGER NOT NULL ," + // 4: sender
                "\"CONTENT\" TEXT);"); // 5: content
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CHAT\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Chat entity) {
        stmt.clearBindings();
 
        Long chat_id = entity.getChat_id();
        if (chat_id != null) {
            stmt.bindLong(1, chat_id);
        }
        stmt.bindLong(2, entity.getSend_time());
        stmt.bindLong(3, entity.getFrom_user_id());
        stmt.bindLong(4, entity.getTo_user_id());
        stmt.bindLong(5, entity.getSender());
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(6, content);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Chat entity) {
        stmt.clearBindings();
 
        Long chat_id = entity.getChat_id();
        if (chat_id != null) {
            stmt.bindLong(1, chat_id);
        }
        stmt.bindLong(2, entity.getSend_time());
        stmt.bindLong(3, entity.getFrom_user_id());
        stmt.bindLong(4, entity.getTo_user_id());
        stmt.bindLong(5, entity.getSender());
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(6, content);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Chat readEntity(Cursor cursor, int offset) {
        Chat entity = new Chat( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // chat_id
            cursor.getLong(offset + 1), // send_time
            cursor.getLong(offset + 2), // from_user_id
            cursor.getLong(offset + 3), // to_user_id
            cursor.getInt(offset + 4), // sender
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // content
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Chat entity, int offset) {
        entity.setChat_id(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setSend_time(cursor.getLong(offset + 1));
        entity.setFrom_user_id(cursor.getLong(offset + 2));
        entity.setTo_user_id(cursor.getLong(offset + 3));
        entity.setSender(cursor.getInt(offset + 4));
        entity.setContent(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Chat entity, long rowId) {
        entity.setChat_id(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Chat entity) {
        if(entity != null) {
            return entity.getChat_id();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Chat entity) {
        return entity.getChat_id() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
